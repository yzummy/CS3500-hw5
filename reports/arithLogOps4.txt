
___Entering new scope...				      <
							      <
TOKEN: NOT 		 LEXEME: !			      <
TOKEN: LPAREN 		 LEXEME: (			      <
TOKEN: LPAREN 		 LEXEME: (			      <
TOKEN: TRUE 		 LEXEME: TRUE			      <
CONST -> TRUE						      <
FACTOR -> CONST						      <
TOKEN: AND 		 LEXEME: &			      <
MULT_OP -> &						      <
TOKEN: FLOATCONST 		 LEXEME: 3.14		      <
CONST -> FLOATCONST					      <
FACTOR -> CONST						      <
TOKEN: RPAREN 		 LEXEME: )			      <
MULT_OP_LIST -> epsilon					      <
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST		      <
TERM -> FACTOR MULT_OP_LIST				      <
ADD_OP_LIST -> epsilon					      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC			      <
EXPR -> ARITHLOGIC_EXPR					      <
FACTOR -> ( EXPR )					      <
TOKEN: OR 		 LEXEME: |			      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
ADD_OP -> |						      <
TOKEN: INTCONST 		 LEXEME: 0		      <
CONST -> INTCONST					      <
FACTOR -> CONST						      <
TOKEN: RPAREN 		 LEXEME: )			      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
ADD_OP_LIST -> epsilon					      <
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST			      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC			      <
EXPR -> ARITHLOGIC_EXPR					      <
FACTOR -> ( EXPR )					      <
FACTOR -> ! FACTOR					      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
ADD_OP_LIST -> epsilon					      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC			      <
EXPR -> ARITHLOGIC_EXPR					      <
START -> EXPR						      <
							      <
---- Completed parsing ----					---- Completed parsing ----

 Value of the expression is: 0.00			      |	Value of the expression is: FALSE
							      <
___Exiting scope...					      <
							      <
