							      <
___Entering new scope...				      <
							      <
TOKEN: LBRACE 		 LEXEME: {			      <
TOKEN: IDENT 		 LEXEME: x			      <
TOKEN: ASSIGN 		 LEXEME: =			      <
INDEX ->  epsilon					      <
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR		      <
___Adding x to symbol table				      <
TOKEN: IF 		 LEXEME: if			      <
TOKEN: LPAREN 		 LEXEME: (			      <
TOKEN: TRUE 		 LEXEME: TRUE			      <
CONST -> TRUE						      <
FACTOR -> CONST						      <
TOKEN: RPAREN 		 LEXEME: )			      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
HERE 2222						      <
ADD_OP_LIST -> epsilon					      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC			      <
EXPR -> ARITHLOGIC_EXPR					      <
TOKEN: CAT 		 LEXEME: cat			      <
TOKEN: LPAREN 		 LEXEME: (			      <
TOKEN: STRCONST 		 LEXEME: "BoJack"	      <
CONST -> STRCONST					      <
FACTOR -> CONST						      <
TOKEN: RPAREN 		 LEXEME: )			      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
HERE 2222						      <
ADD_OP_LIST -> epsilon					      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC			      <
EXPR -> ARITHLOGIC_EXPR					      <
OUTPUT_EXPR -> CAT ( EXPR )				      <
"BoJack"							"BoJack"
EXPR -> OUTPUT_EXPR					      |	Line 3: Arg 1 must be integer or float or bool
TOKEN: ELSE 		 LEXEME: else			      <
TOKEN: FLOATCONST 		 LEXEME: 3.14		      <
CONST -> FLOATCONST					      <
FACTOR -> CONST						      <
TOKEN: SEMICOLON 		 LEXEME: ;		      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
HERE 2222						      <
ADD_OP_LIST -> epsilon					      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC			      <
EXPR -> ARITHLOGIC_EXPR					      <
IF_EXPR -> IF ( EXPR ) EXPR ELSE EXPR			      <
EXPR -> IF_EXPR						      <
EXPR -> ASSIGNMENT_EXPR					      <
TOKEN: IDENT 		 LEXEME: y			      <
TOKEN: ASSIGN 		 LEXEME: =			      <
INDEX ->  epsilon					      <
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR		      <
___Adding y to symbol table				      <
TOKEN: IDENT 		 LEXEME: x			      <
TOKEN: ADD 		 LEXEME: +			      <
ENTIRE_VAR -> IDENT					      <
VAR -> ENTIRE_VAR					      <
FACTOR -> VAR						      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
HERE 2222						      <
ADD_OP -> +						      <
TOKEN: INTCONST 		 LEXEME: 100		      <
CONST -> INTCONST					      <
FACTOR -> CONST						      <
TOKEN: SEMICOLON 		 LEXEME: ;		      <
MULT_OP_LIST -> epsilon					      <
TERM -> FACTOR MULT_OP_LIST				      <
HERE 2222						      <
ADD_OP_LIST -> epsilon					      <
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST			      <
it 3 is optype logical 0 				      <
is logical FALSE					      <
here 66666100, 100.000000 				      <
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST			      <
it 1 is optype logical 7Line 3: Arg 1 must be integer or floa <
