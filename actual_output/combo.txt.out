
___Entering new scope...

TOKEN: LBRACE 		 LEXEME: {
TOKEN: IDENT 		 LEXEME: A
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding A to symbol table
hello    hello   TOKEN: LIST 		 LEXEME: list
TOKEN: LPAREN 		 LEXEME: (
TOKEN: FLOATCONST 		 LEXEME: 3.14
CONST -> FLOATCONST
TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: -21
CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,
TOKEN: STRCONST 		 LEXEME: "BoJack"
CONST -> STRCONST
TOKEN: COMMA 		 LEXEME: ,
TOKEN: TRUE 		 LEXEME: TRUE
CONST -> TRUE
TOKEN: RPAREN 		 LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: x
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding x to symbol table
hello    hello   TOKEN: INTCONST 		 LEXEME: 100
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SUB 		 LEXEME: -
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> -
TOKEN: IDENT 		 LEXEME: A
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: INTCONST 		 LEXEME: 1
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACKET 		 LEXEME: ]
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET 		 LEXEME: ]
SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT
FACTOR -> VAR
TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: x
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
0.00
EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: w
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding w to symbol table
hello    hello   TOKEN: INTCONST 		 LEXEME: 200
CONST -> INTCONST
FACTOR -> CONST
TOKEN: MOD 		 LEXEME: %%
MULT_OP -> %%
TOKEN: FLOATCONST 		 LEXEME: 2.71
CONST -> FLOATCONST
FACTOR -> CONST
TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: w
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
0.00
EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: A
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: INTCONST 		 LEXEME: 2
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACKET 		 LEXEME: ]
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET 		 LEXEME: ]
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  [[ EXPR ]]
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: IDENT 		 LEXEME: A
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: INTCONST 		 LEXEME: 2
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACKET 		 LEXEME: ]
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET 		 LEXEME: ]
TOKEN: ADD 		 LEXEME: +
SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: INTCONST 		 LEXEME: 25
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
( 3.14 -21 "BoJack" TRUE )( 3.14 -21 "BoJack" TRUE )EXPR -> ASSIGNMENT_EXPR
TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: A
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
( 3.14 -21 "BoJack" TRUE )EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: y
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding y to symbol table
hello    hello   TOKEN: IF 		 LEXEME: if
TOKEN: LPAREN 		 LEXEME: (
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: x
TOKEN: GT 		 LEXEME: >
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: IDENT 		 LEXEME: w
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: OR 		 LEXEME: |
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> |
TOKEN: IDENT 		 LEXEME: A
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: LBRACKET 		 LEXEME: [
TOKEN: INTCONST 		 LEXEME: 4
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACKET 		 LEXEME: ]
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET 		 LEXEME: ]
SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT
FACTOR -> VAR
TOKEN: RPAREN 		 LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: LBRACE 		 LEXEME: {
TOKEN: CAT 		 LEXEME: cat
TOKEN: LPAREN 		 LEXEME: (
TOKEN: NOT 		 LEXEME: !
TOKEN: IDENT 		 LEXEME: w
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
FACTOR -> ! FACTOR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> CAT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: z
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding z to symbol table
hello    hello   TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: w
TOKEN: POWER 		 LEXEME: ^
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP -> ^
TOKEN: INTCONST 		 LEXEME: 2
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN 		 LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: DIV 		 LEXEME: /
MULT_OP -> /
TOKEN: INTCONST 		 LEXEME: 4
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACE 		 LEXEME: }
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
TOKEN: ELSE 		 LEXEME: else
TOKEN: STRCONST 		 LEXEME: "Mr. Peanutbutter"
CONST -> STRCONST
FACTOR -> CONST
TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
IF_EXPR -> IF ( EXPR ) EXPR ELSE EXPR
EXPR -> IF_EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: y
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
"Mr. Peanutbutter"
EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: QUIT 		 LEXEME: quit
TOKEN: LPAREN 		 LEXEME: (
TOKEN: RPAREN 		 LEXEME: )
QUIT_EXPR -> QUIT()
EXPR -> QUIT_EXPR
